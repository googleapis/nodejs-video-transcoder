// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as transcoderserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.TranscoderServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = transcoderserviceModule.v1beta1.TranscoderServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = transcoderserviceModule.v1beta1.TranscoderServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = transcoderserviceModule.v1beta1.TranscoderServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.transcoderServiceStub, undefined);
        await client.initialize();
        assert(client.transcoderServiceStub);
    });

    it('has close method', () => {
        const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('createJob', () => {
        it('invokes createJob without error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.CreateJobRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job());
            client.innerApiCalls.createJob = stubSimpleCall(expectedResponse);
            const [response] = await client.createJob(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createJob without error using callback', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.CreateJobRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job());
            client.innerApiCalls.createJob = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createJob(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.video.transcoder.v1beta1.IJob|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createJob with error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.CreateJobRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createJob = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createJob(request), expectedError);
            assert((client.innerApiCalls.createJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getJob', () => {
        it('invokes getJob without error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.GetJobRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job());
            client.innerApiCalls.getJob = stubSimpleCall(expectedResponse);
            const [response] = await client.getJob(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getJob without error using callback', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.GetJobRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job());
            client.innerApiCalls.getJob = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getJob(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.video.transcoder.v1beta1.IJob|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getJob with error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.GetJobRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getJob = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getJob(request), expectedError);
            assert((client.innerApiCalls.getJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteJob', () => {
        it('invokes deleteJob without error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.DeleteJobRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteJob = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteJob(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteJob without error using callback', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.DeleteJobRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteJob = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteJob(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteJob with error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.DeleteJobRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteJob = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteJob(request), expectedError);
            assert((client.innerApiCalls.deleteJob as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createJobTemplate', () => {
        it('invokes createJobTemplate without error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.CreateJobTemplateRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate());
            client.innerApiCalls.createJobTemplate = stubSimpleCall(expectedResponse);
            const [response] = await client.createJobTemplate(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createJobTemplate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createJobTemplate without error using callback', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.CreateJobTemplateRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate());
            client.innerApiCalls.createJobTemplate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createJobTemplate(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.video.transcoder.v1beta1.IJobTemplate|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createJobTemplate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createJobTemplate with error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.CreateJobTemplateRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createJobTemplate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createJobTemplate(request), expectedError);
            assert((client.innerApiCalls.createJobTemplate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getJobTemplate', () => {
        it('invokes getJobTemplate without error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.GetJobTemplateRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate());
            client.innerApiCalls.getJobTemplate = stubSimpleCall(expectedResponse);
            const [response] = await client.getJobTemplate(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getJobTemplate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getJobTemplate without error using callback', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.GetJobTemplateRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate());
            client.innerApiCalls.getJobTemplate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getJobTemplate(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.video.transcoder.v1beta1.IJobTemplate|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getJobTemplate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getJobTemplate with error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.GetJobTemplateRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getJobTemplate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getJobTemplate(request), expectedError);
            assert((client.innerApiCalls.getJobTemplate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteJobTemplate', () => {
        it('invokes deleteJobTemplate without error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.DeleteJobTemplateRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteJobTemplate = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteJobTemplate(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteJobTemplate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteJobTemplate without error using callback', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.DeleteJobTemplateRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteJobTemplate = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteJobTemplate(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteJobTemplate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteJobTemplate with error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.DeleteJobTemplateRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteJobTemplate = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteJobTemplate(request), expectedError);
            assert((client.innerApiCalls.deleteJobTemplate as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listJobs', () => {
        it('invokes listJobs without error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job()),
            ];
            client.innerApiCalls.listJobs = stubSimpleCall(expectedResponse);
            const [response] = await client.listJobs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listJobs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listJobs without error using callback', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job()),
            ];
            client.innerApiCalls.listJobs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listJobs(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.video.transcoder.v1beta1.IJob[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listJobs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listJobs with error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listJobs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listJobs(request), expectedError);
            assert((client.innerApiCalls.listJobs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listJobsStream without error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job()),
            ];
            client.descriptors.page.listJobs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listJobsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.video.transcoder.v1beta1.Job[] = [];
                stream.on('data', (response: protos.google.cloud.video.transcoder.v1beta1.Job) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listJobs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listJobs, request));
            assert.strictEqual(
                (client.descriptors.page.listJobs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listJobsStream with error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listJobs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listJobsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.video.transcoder.v1beta1.Job[] = [];
                stream.on('data', (response: protos.google.cloud.video.transcoder.v1beta1.Job) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listJobs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listJobs, request));
            assert.strictEqual(
                (client.descriptors.page.listJobs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listJobs without error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.Job()),
            ];
            client.descriptors.page.listJobs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.video.transcoder.v1beta1.IJob[] = [];
            const iterable = client.listJobsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listJobs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listJobs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listJobs with error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listJobs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listJobsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.video.transcoder.v1beta1.IJob[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listJobs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listJobs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listJobTemplates', () => {
        it('invokes listJobTemplates without error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobTemplatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate()),
            ];
            client.innerApiCalls.listJobTemplates = stubSimpleCall(expectedResponse);
            const [response] = await client.listJobTemplates(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listJobTemplates as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listJobTemplates without error using callback', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobTemplatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate()),
            ];
            client.innerApiCalls.listJobTemplates = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listJobTemplates(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.video.transcoder.v1beta1.IJobTemplate[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listJobTemplates as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listJobTemplates with error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobTemplatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listJobTemplates = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listJobTemplates(request), expectedError);
            assert((client.innerApiCalls.listJobTemplates as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listJobTemplatesStream without error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobTemplatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate()),
            ];
            client.descriptors.page.listJobTemplates.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listJobTemplatesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.video.transcoder.v1beta1.JobTemplate[] = [];
                stream.on('data', (response: protos.google.cloud.video.transcoder.v1beta1.JobTemplate) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listJobTemplates.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listJobTemplates, request));
            assert.strictEqual(
                (client.descriptors.page.listJobTemplates.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listJobTemplatesStream with error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobTemplatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listJobTemplates.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listJobTemplatesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.video.transcoder.v1beta1.JobTemplate[] = [];
                stream.on('data', (response: protos.google.cloud.video.transcoder.v1beta1.JobTemplate) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listJobTemplates.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listJobTemplates, request));
            assert.strictEqual(
                (client.descriptors.page.listJobTemplates.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listJobTemplates without error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobTemplatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate()),
              generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.JobTemplate()),
            ];
            client.descriptors.page.listJobTemplates.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.video.transcoder.v1beta1.IJobTemplate[] = [];
            const iterable = client.listJobTemplatesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listJobTemplates.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listJobTemplates.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listJobTemplates with error', async () => {
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.video.transcoder.v1beta1.ListJobTemplatesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listJobTemplates.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listJobTemplatesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.video.transcoder.v1beta1.IJobTemplate[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listJobTemplates.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listJobTemplates.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('job', () => {
            const fakePath = "/rendered/path/job";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                job: "jobValue",
            };
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.jobPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.jobPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('jobPath', () => {
                const result = client.jobPath("projectValue", "locationValue", "jobValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.jobPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromJobName', () => {
                const result = client.matchProjectFromJobName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.jobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromJobName', () => {
                const result = client.matchLocationFromJobName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.jobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchJobFromJobName', () => {
                const result = client.matchJobFromJobName(fakePath);
                assert.strictEqual(result, "jobValue");
                assert((client.pathTemplates.jobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('jobTemplate', () => {
            const fakePath = "/rendered/path/jobTemplate";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                job_template: "jobTemplateValue",
            };
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.jobTemplatePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.jobTemplatePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('jobTemplatePath', () => {
                const result = client.jobTemplatePath("projectValue", "locationValue", "jobTemplateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.jobTemplatePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromJobTemplateName', () => {
                const result = client.matchProjectFromJobTemplateName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.jobTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromJobTemplateName', () => {
                const result = client.matchLocationFromJobTemplateName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.jobTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchJobTemplateFromJobTemplateName', () => {
                const result = client.matchJobTemplateFromJobTemplateName(fakePath);
                assert.strictEqual(result, "jobTemplateValue");
                assert((client.pathTemplates.jobTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new transcoderserviceModule.v1beta1.TranscoderServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
